version: "3.5"

volumes:
  authentication-data:
  metastore-data:
  datastore-data:

networks:
  components:
    name: pegelhub-components

  authentication-net:
    name: pegelhub-authentication

  meta-net:
    name: pegelhub-metastore

  data-net:
    name: pegelhub-datastore

services:
  # base environment
  rabbit:
    image: rabbitmq
    environment:
      - RABBITMQ_DEFAULT_USER=$RABBIT_USER
      - RABBITMQ_DEFAULT_PASS=$RABBIT_PASSWORD
    networks:
      - components

  registry:
    build:
      context: service-registry
    environment:
      - MQ_USER=$RABBIT_USER
      - MQ_PASSWORD=$RABBIT_PASSWORD
    depends_on:
      - rabbit
    networks:
      - components

  auth-db:
    image: postgres:10
    environment:
      - POSTGRES_PASSWORD=$AUTH_PASSWORD
      - POSTGRES_DB=$AUTH_DB
    volumes:
      - "authentication-data:/var/lib/postgresql"
    networks:
      - authentication-net

  authentication:
    image: quay.io/keycloak/keycloak:17.0.0
    environment:
      - KEYCLOAK_ADMIN=$AUTH_ADMIN_USER
      - KEYCLOAK_ADMIN_PASSWORD=$AUTH_ADMIN_PASSWORD
      - KC_DB=postgres
      - KC_DB_PASSWORD=$AUTH_PASSWORD
      - KC_DB_URL_DATABASE=$AUTH_DB
      - KC_DB_URL_HOST=auth-db
      - KC_DB_USERNAME=postgres
      - KC_FEATURES=token-exchange
      - KC_HTTP_PORT=8081
      - KC_HOSTNAME=http://localhost:8081/
      - KC_HOSTNAME_STRICT=false
      - KC_PROXY=passthrough
    command:
      - start-dev
#      - start --auto-build
    ports:
      - "8081:8081"
    depends_on:
      - auth-db
    networks:
      - components
      - authentication-net

  # backend components
  meta-db:
    image: postgres
    environment:
      - POSTGRES_PASSWORD=$META_PASSWORD
      - POSTGRES_DB=$META_DB
    volumes:
      - "metastore-data:/var/lib/postgresql"
    networks:
      - meta-net

  meta-store:
    build:
      context: meta-store
    environment:
      - RABBIT_USER=$RABBIT_USER
      - RABBIT_PASSWORD=$RABBIT_PASSWORD
      - DB_URI=meta-db:5432/$META_DB
      - DB_USER=postgres
      - DB_PASSWORD=$META_PASSWORD
    depends_on:
      - rabbit
      - registry
      - meta-db
    networks:
      - components
      - meta-net

  data-db:
    image: influxdb:2.2-alpine
    environment:
      - DOCKER_INFLUXDB_INIT_MODE=setup
      - DOCKER_INFLUXDB_INIT_USERNAME=$DATA_ADMIN_USER
      - DOCKER_INFLUXDB_INIT_PASSWORD=$DATA_ADMIN_PASSWORD
      - DOCKER_INFLUXDB_INIT_ORG=$DATA_ORG
      - DOCKER_INFLUXDB_INIT_BUCKET=$INTERNAL_DB
      - BUCKET_TELEMETRY=$TELEMETRY_DB
      - BUCKET_DATA=$DATA_DB
      - STORE_USER=$DATA_USER
    ports:
      - "8082:8086"
    volumes:
      - "datastore-data:/var/lib/influxdb"
      - "./init-influxdb.sh:/docker-entrypoint-initdb.d/00-setup.sh"
      - "./.datastoreconfig:/etc/influxdb2/store/"
    networks:
      - data-net

  data-store:
    build:
      context: data-store
    environment:
      - RABBIT_USER=$RABBIT_USER
      - RABBIT_PASSWORD=$RABBIT_PASSWORD
      - TELEMETRY_STORE_URL=http://data-db:8086/
      - TELEMETRY_STORE_ORG=$DATA_USER
      - TELEMETRY_STORE_BUCKET=$DATA_DB
      - TELEMETRY_STORE_TOKEN=$DATA_PASSWORD
      - DATA_STORE_URL=http://data-db:8086/
      - DATA_STORE_ORG=$DATA_USER
      - DATA_STORE_BUCKET=$DATA_DB
      - DATA_STORE_TOKEN=$DATA_PASSWORD
      - INFLUX_FILE=/etc/influxdb2/store/storeapp.yaml
    volumes:
      - "./.datastoreconfig:/etc/influxdb2/store/"
    depends_on:
      - rabbit
      - registry
      - data-db
    networks:
      - components
      - data-net

  # edge components
  connector-management-service:
    build:
      context: connector-management-service
    environment:
      - RABBIT_USER=$RABBIT_USER
      - RABBIT_PASSWORD=$RABBIT_PASSWORD
    depends_on:
      - rabbit
      - registry
      - meta-store
      - authentication
    networks:
      - components

#  connector-data-service:
#    build:
#      context: connector-data-service
#    environment:
#      - RABBIT_USER=$RABBIT_USER
#      - RABBIT_PASSWORD=$RABBIT_PASSWORD
#    depends_on:
#      - rabbit
#      - registry
#      - data-store
#      - authentication
#    networks:
#      - components

  # exposed proxy service
  proxy:
    build:
      context: routing-proxy
    ports:
      - "8086:8080"
    depends_on:
      - registry
      - connector-management-service
    networks:
      - components